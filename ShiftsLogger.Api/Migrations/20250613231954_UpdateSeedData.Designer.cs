// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShiftsLogger.API.Data;

#nullable disable

namespace ShiftsLogger.Api.Migrations
{
    [DbContext(typeof(ShiftsDbContext))]
    [Migration("20250613231954_UpdateSeedData")]
    partial class UpdateSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShiftsLogger.API.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Duration")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("time")
                        .HasComputedColumnSql("\r\n            CONVERT(TIME(0), \r\n                CASE \r\n                    WHEN EndTime < StartTime \r\n                        THEN DATEADD(MINUTE, DATEDIFF(MINUTE, \r\n                            CAST(StartTime AS DATETIME), \r\n                            DATEADD(DAY, 1, CAST(EndTime AS DATETIME))\r\n                        ), '00:00')\r\n                    ELSE DATEADD(MINUTE, DATEDIFF(MINUTE, \r\n                            CAST(StartTime AS DATETIME), \r\n                            CAST(EndTime AS DATETIME)\r\n                        ), '00:00')\r\n                END)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TIME(0)");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TIME(0)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("ShiftId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            ShiftId = 1,
                            Date = new DateOnly(2025, 6, 15),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(16, 0, 0),
                            ShiftName = "1st",
                            StartTime = new TimeOnly(8, 0, 0),
                            WorkerId = 1
                        },
                        new
                        {
                            ShiftId = 2,
                            Date = new DateOnly(2025, 6, 15),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(0, 0, 0),
                            ShiftName = "2nd",
                            StartTime = new TimeOnly(16, 0, 0),
                            WorkerId = 1
                        },
                        new
                        {
                            ShiftId = 3,
                            Date = new DateOnly(2025, 6, 14),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(0, 0, 0),
                            ShiftName = "2nd",
                            StartTime = new TimeOnly(16, 0, 0),
                            WorkerId = 2
                        },
                        new
                        {
                            ShiftId = 4,
                            Date = new DateOnly(2025, 6, 14),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(8, 0, 0),
                            ShiftName = "3rd",
                            StartTime = new TimeOnly(0, 0, 0),
                            WorkerId = 2
                        },
                        new
                        {
                            ShiftId = 5,
                            Date = new DateOnly(2025, 6, 13),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(0, 0, 0),
                            ShiftName = "3rd",
                            StartTime = new TimeOnly(16, 0, 0),
                            WorkerId = 3
                        },
                        new
                        {
                            ShiftId = 6,
                            Date = new DateOnly(2025, 6, 13),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(0, 0, 0),
                            ShiftName = "2nd",
                            StartTime = new TimeOnly(16, 0, 0),
                            WorkerId = 3
                        },
                        new
                        {
                            ShiftId = 7,
                            Date = new DateOnly(2025, 6, 14),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(16, 0, 0),
                            ShiftName = "1st",
                            StartTime = new TimeOnly(8, 0, 0),
                            WorkerId = 4
                        },
                        new
                        {
                            ShiftId = 8,
                            Date = new DateOnly(2025, 6, 13),
                            Duration = new TimeOnly(0, 0, 0),
                            EndTime = new TimeOnly(16, 0, 0),
                            ShiftName = "1st",
                            StartTime = new TimeOnly(8, 0, 0),
                            WorkerId = 4
                        });
                });

            modelBuilder.Entity("ShiftsLogger.API.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkerId");

                    b.ToTable("Workers");

                    b.HasData(
                        new
                        {
                            WorkerId = 1,
                            FirstName = "Tom",
                            LastName = "Foolery",
                            Title = "Laborer"
                        },
                        new
                        {
                            WorkerId = 2,
                            FirstName = "Sue",
                            LastName = "Smith",
                            Title = "Laborer"
                        },
                        new
                        {
                            WorkerId = 3,
                            FirstName = "Doug",
                            LastName = "Mitchell",
                            Title = "Foreman"
                        },
                        new
                        {
                            WorkerId = 4,
                            FirstName = "Mike",
                            LastName = "Wilson",
                            Title = "Apprentice"
                        });
                });

            modelBuilder.Entity("ShiftsLogger.API.Models.Shift", b =>
                {
                    b.HasOne("ShiftsLogger.API.Models.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });
#pragma warning restore 612, 618
        }
    }
}
